:host-context(::ng-deep.x-form) {
  @mixin formFieldRegularProps {
    //
    x-icon {
      --size: 20px;
    }

    //
    .x-field-label {
    }

    //
    .auto-size-flex {
      flex: 0 0 auto !important;
    }
  }

  @mixin formInputElementProps {
    //
    .mat-input-element {
      @include colorHandler(var(--regular-color), false);
    }

    //
    .x-form-input-element {
      width: 100%;
      border: unset;
      outline: unset;
      border-color: transparent;

      //
      &:focus {
        outline: var(--active-color) auto 1px;
      }

      //
      @include colorHandler(var(--regular-color), false);
      @include backgroundColorHandler(transparent, false);
    }
  }

  @mixin formFieldHintProps(
    $color: var(--hint-color),
    $size: var(--hint-text-size)
  ) {
    .x-form-control-hint {
      //
      color: $color;
      font-size: $size;
    }
  }

  @mixin formFieldErrorProps(
    $color: var(--invalid-color),
    $size: var(--error-text-size)
  ) {
    .x-form-field-error {
      //
      color: $color;
      font-size: $size;
    }
  }

  @mixin formFieldProps {
    //
    .x-form-field {
      //
      @include radioButtonProps;
      @include rangeOptionProps;
      @include selectOptionProps;
      @include toogleColorHandler;
      @include checkBoxColorHandler;
      @include formFieldRegularProps;
      @include formInputElementProps;
      @include formFieldAppearanceHandler;
      @include colorHandler(var(--regular-color));
      @include backgroundColorHandler(transparent !important);

      //
      &.x-mat-form-field {
        //
        width: 100%;

        //
        &.mat-focused {
          @include formFieldFocusHandler;
        }
      }

      //
      &.x-form-radio-field {
        //
        outline: unset;

        //
        &.x-focused {
          //
          @include formFieldFocusHandler;
          @include iconStatusColorHandler(var(--active-color) !important);
        }
      }

      //
      &:not(.x-mat-form-field):not(.x-form-radio-field) {
        //
        outline: unset;

        //
        &.x-focused {
          //
          @include formFieldFocusHandler;
          border-color: var(--active-color);
        }
      }
    }
  }

  @mixin autoCompleteProps {
    /* Auto Complete Styling */
    //
    $duration: 250ms;
    $transform-show: scaleY(1);
    $transform-hide: scaleY(0);

    .x-auto-complete-wrapper {
      position: unset;
      display: unset;
    }

    .x-auto-complete {
      //
      position: fixed;

      //
      &.x-auto-complete-margin {
        margin-top: 0;
      }

      //
      height: calc(50%);
      max-height: 300px;

      //
      left: 8px;
      right: 8px;
      overflow-y: scroll;

      //
      z-index: 113;

      //
      transform: $transform-hide;
      -ms-transform: $transform-hide;
      -webkit-transform: $transform-hide;

      //
      transition: transform;
      -webkit-transition: transform;

      //
      transition-duration: $duration;
      -webkit-transition-duration: $duration;

      //
      &.open {
        //
        transform: $transform-show;
        -ms-transform: $transform-show;
        -webkit-transform: $transform-show;

        //
        transition-duration: $duration;
        -webkit-transition-duration: $duration;
      }
    }
    /* END Auto Complete Styling */
  }

  @mixin selectOptionProps {
    //
    .x-select-option {
      width: 100%;
      margin-bottom: 4px;

      &:last-child {
        margin-bottom: 8px;
      }
    }
  }

  @mixin rangeOptionProps {
    //
    .x-form-range-control {
      width: 100%;
    }
  }

  @mixin radioButtonProps($disabled: false) {
    //
    .x-radio-button {
      //
      @include radioColorHandler(var(--regular-color), true, false);

      //
      &.active {
        //
        @include radioColorHandler(var(--active-color) !important, true, true);
      }
    }

    &.x-form-radio-field {
      //
      outline: unset;

      //
      &.x-focused {
        //
        .x-field-label {
          color: var(--active-color) !important;
        }
        border-color: var(--active-color) !important;

        //
        @include iconStatusColorHandler(var(--active-color));
      }
    }
  }

  @mixin formFieldFocusHandler {
    //
    .mat-form-field-ripple {
      @include backgroundColorHandler(var(--active-color) !important, false);
    }

    //
    @include iconStatusColorHandler(var(--active-color));
    @include formFieldLabelColorHandler(var(--active-color));
    @include formFieldWrapperColorHandler(var(--active-color));
    @include matFormFieldOutlineColorHandler(var(--active-color) !important);
  }

  @mixin formFieldAppearanceHandler($disabled: false) {
    //
    // Label Colors ...
    @if $disabled {
      @include formFieldLabelColorHandler(var(--disabled-color));

      //
      .x-form-field-appearance-fill:not(.x-mat-form-field) {
        border-color: var(--disabled-fill-color);
      }
    }

    //
    // None ...
    .x-form-field-appearance-none {
      //
      @if $disabled {
        @include formFieldLabelColorHandler(var(--disabled-color));
      } @else {
      }
    }

    //
    // Legacy ...
    // Standard ...
    .x-form-field-appearance-legacy,
    .x-form-field-appearance-standard {
      //
      @if $disabled {
        @include matFormFieldUnderlineColorHandler(
          var(--disabled-fill-color) !important,
          true
        );
      } @else {
        @include matFormFieldUnderlineColorHandler(
          var(--fill-color) !important
        );
      }

      //
      &:not(.x-mat-form-field) {
        @if $disabled {
        } @else {
          //
          padding: 8px;
          border-radius: 0;
          border-bottom-width: 1px;
          border-bottom-style: solid;
          border-color: var(--regular-color);
        }
      }
    }

    //
    // Outline ...
    .x-form-field-appearance-outline {
      //
      @if $disabled {
        @include matFormFieldOutlineColorHandler(var(--disabled-fill-color));
      } @else {
        @include matFormFieldOutlineColorHandler(var(--fill-color));
      }

      //
      &:not(.x-mat-form-field) {
        @if $disabled {
          @include backgroundColorHandler(
            var(--disabled-fill-color) !important,
            false
          );
        } @else {
          //
          padding: 8px;
          border-radius: 3px;
          border-width: 1px;
          border-style: solid;
          border-color: var(--regular-color);
        }
      }
    }

    //
    // Fill ...
    .x-form-field-appearance-fill {
      //
      &.x-mat-form-field {
        //
        @if $disabled {
          //
          .mat-form-field-flex {
            @include colorHandler(var(--disabled-fill-color) !important);
            @include backgroundColorHandler(
              var(--disabled-fill-color) !important,
              false
            );
          }

          //
          @include matFormFieldUnderlineColorHandler(var(--disabled-color));
        } @else {
          //
          .mat-form-field-flex {
            @include colorHandler(var(--regular-color) !important);
            @include backgroundColorHandler(
              var(--fill-color) !important,
              false
            );
          }

          //
          @include matFormFieldUnderlineColorHandler(var(--regular-color));
        }
      }

      //
      &:not(.x-mat-form-field) {
        @if $disabled {
          @include backgroundColorHandler(
            var(--disabled-fill-color) !important,
            false
          );
        } @else {
          //
          padding: 8px;
          border-radius: 3px;
          border-bottom-width: 1px;
          border-bottom-style: solid;
          border-bottom-left-radius: 0;
          border-bottom-right-radius: 0;
          border-color: var(--regular-color);

          //
          @include backgroundColorHandler(var(--fill-color) !important, false);
        }
      }
    }
  }

  @mixin formFieldStatusHandler {
    //
    // Global ...
    @include formFieldAppearanceHandler(false);

    //
    // Disabled ...
    &.x-form-field-wrapper-disabled {
      //
      .x-form-input-element {
        //
        opacity: 1 !important;
        border-color: var(--disabled-fill-color) !important;

        //
        @include colorHandler(var(--disabled-color) !important, false);
      }

      //
      .x-form-control {
        opacity: 1 !important;
        @include colorHandler(var(--disabled-color) !important, false);
      }

      //
      @include formFieldAppearanceHandler(true);
      @include formFieldHintProps(var(--disabled-color));
      @include formFieldErrorProps(var(--disabled-color));
      @include iconStatusColorHandler(var(--disabled-color));
      @include formFieldWrapperColorHandler(var(--disabled-color));
      @include radioColorHandler(var(--disabled-color) !important, true, true);
    }

    //
    // Valid ...
    &.x-form-field-wrapper-valid {
      &.apply-status {
        @include formFieldWrapperColorHandler(var(--valid-color));
      }
    }

    //
    // Invalid ...
    &.x-form-field-wrapper-invalid {
      &.apply-status {
        @include formFieldWrapperColorHandler(var(--invalid-color));
      }
    }

    //
    // Pending ...
    &.x-form-field-wrapper-pending {
      &.apply-status {
        @include formFieldWrapperColorHandler(var(--pending-color));
      }
    }
  }

  @mixin colorHandler($color: var(--regular-color), $applyToChilds: true) {
    color: $color;

    //
    @if $applyToChilds {
      *:not(x-icon):not(x-icon > *) {
        color: $color;
      }
    }

    //
    @include matFormFieldOutlineColorHandler($color);
  }

  @mixin backgroundColorHandler($color: transaprent, $applyToChilds: true) {
    background-color: $color;

    //
    @if $applyToChilds {
      *:not(.mat-form-field-ripple) {
        background-color: $color;
      }
    }
  }

  @mixin formFieldWrapperColorHandler($color: var(--regular-color)) {
    //
    .x-form-input-element {
      outline: $color auto 1px;
    }

    //
    .x-form-field:not(.x-mat-form-field) {
      border-color: $color;
    }

    //
    @include toogleColorHandler($color);
    @include checkBoxColorHandler($color);
    @include formFieldLabelColorHandler($color);
    @include matFormFieldOutlineColorHandler($color);
    @include iconStatusColorHandler($color !important);
    @include matFormFieldUnderlineColorHandler($color !important);
  }

  @mixin radioColorHandler(
    $color: var(--regular-color),
    $applyOnOuterCircle: false,
    $applyOnInnerCircle: false
  ) {
    //
    .mat-radio-label {
      //
      color: $color;

      //
      @if $applyOnOuterCircle {
        .mat-radio-outer-circle {
          border-color: $color;
        }
      }

      //
      @if $applyOnInnerCircle {
        .mat-radio-inner-circle {
          background-color: $color;
        }
      }
    }
  }

  @mixin checkBoxColorHandler($color: var(--regular-color)) {
    //
    .mat-checkbox-frame {
      border-color: var(--regular-color); // $color;
    }

    //
    .mat-checkbox-checked {
      .mat-checkbox-background {
        background-color: var(--active-color) !important;
      }
    }

    //
    .mat-checkbox-label {
      .x-field-label {
        width: 100%;
      }
    }

    //
    .x-form-control {
      &.has-icon {
        .mat-checkbox-layout {
          margin: {
            left: 4px;
            right: 4px;
          }
        }
      }
    }
  }

  @mixin toogleColorHandler($color: var(--regular-color)) {
    //
    .mat-slide-toggle-bar {
      background-color: var(--active-color) !important;
    }

    //
    .mat-slide-toggle-thumb {
      background-color: $color !important;
    }

    //
    .x-form-control {
      &.has-icon {
        .mat-slide-toggle-label {
          margin: {
            left: 4px;
            right: 4px;
          }
        }
      }
    }
  }

  @mixin formFieldLabelColorHandler($color: var(--regular-color)) {
    //
    .mat-form-field-label {
      color: $color;
    }

    .x-field-label {
      color: $color;
    }
  }

  @mixin iconStatusColorHandler($color: var(--regular-color)) {
    //
    x-icon.x-status-handler > * {
      color: $color;
    }
  }

  @mixin matFormFieldUnderlineColorHandler(
    $color: var(--fill-color),
    $clearBackground: false
  ) {
    //
    .mat-form-field-underline {
      //
      border-color: $color;
      background-color: $color;

      //
      &::before {
        background-color: $color;
      }

      //
      @if $clearBackground {
        background-image: none;
      }
    }

    //
    .mat-select-arrow {
      color: $color;
    }
  }

  @mixin matFormFieldOutlineColorHandler($color: var(--regular-color)) {
    //
    color: $color;

    //
    .mat-form-field-outline-start,
    .mat-form-field-outline-end,
    .mat-form-field-outline-gap {
      border-width: 1px !important;
    }

    //
    .mat-form-field-outline,
    .mat-form-field-outline-thick {
      color: $color;
      border-width: 1px !important;
    }
  }

  //
  .x-form-field-wrapper {
    //
    margin-bottom: var(--form-fields-vertical-margin);

    //
    .mat-form-field-wrapper {
      padding-bottom: 0;
    }

    //
    .mat-form-field-underline {
      position: initial;
    }

    //
    .ng-invalid,
    .mat-form-field-invalid {
      * {
        color: inherit;
        background-color: inherit;
      }
    }

    //
    @include formFieldProps;
    @include autoCompleteProps;
    @include formFieldStatusHandler;
    @include formFieldHintProps(var(--hint-color), var(--hint-text-size));
    @include formFieldErrorProps(var(--invalid-color), var(--error-text-size));
  }
}

::ng-deep.cdk-overlay-pane {
  transform: translateY(0px) !important;
}

::ng-deep.x-form-select-control {
  //
  min-width: 100% !important;

  //
  &:not(.x-form-select-control-panel) {
    max-width: 100% !important;
  }

  //
  &.x-form-select-control-panel {
  }

  //
  .mat-select-value-text {
    color: var(--regular-color) !important;
  }

  //
  .x-select-option {
    //
    color: var(--regular-color) !important;
    background-color: var(--fill-color) !important;

    //
    &.mat-selected {
      //
      color: var(--active-color) !important;

      //
      .mat-pseudo-checkbox-checked {
        background: var(--active-color) !important;
      }

      //
      .mat-pseudo-checkbox::after {
        color: var(--checkbox-check-color) !important;
      }
    }

    //
    &:hover {
      $level: 0.5;
      -webkit-filter: brightness($level);
      filter: brightness($level);
    }
  }
}
